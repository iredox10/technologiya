---
import MainLayout from '../../layouts/MainLayout.astro';
import ArticleCard from '../../components/ArticleCard';
import { articleService, categoryService, authorService } from '../../lib/appwriteServices';
import type { Article, Category, Author } from '../../types';

export async function getStaticPaths() {
  const categoriesResult = await categoryService.getCategories();
  
  if (!categoriesResult.success || !categoriesResult.data) {
    return [];
  }

  const categories = categoriesResult.data.documents as unknown as Category[];
  
  return categories.map((category) => ({
    params: { slug: category.slug },
    props: { categoryId: category.$id, categorySlug: category.slug },
  }));
}

const { categoryId, categorySlug } = Astro.props;
const { slug } = Astro.params;

// Fetch category data
let category: Category;
let allCategories: Category[] = [];

// Try to use categoryId from props (static build)
if (categoryId) {
  const categoryResult = await categoryService.getCategory(categoryId);
  category = categoryResult.success && categoryResult.data
    ? (categoryResult.data as unknown as Category)
    : { name: 'Unknown', slug: categorySlug, description: '' } as any;
} else {
  // Dev mode - fetch all categories and find by slug
  const categoriesResult = await categoryService.getCategories();
  if (categoriesResult.success && categoriesResult.data) {
    const cats = categoriesResult.data.documents as unknown as Category[];
    const foundCategory = cats.find(c => c.slug === slug);
    category = foundCategory || { name: 'Unknown', slug: slug, description: '' } as any;
  } else {
    category = { name: 'Unknown', slug: slug, description: '' } as any;
  }
}

// Fetch all articles and filter by category
const articlesResult = await articleService.getArticles();
let enrichedArticles: any[] = [];

if (articlesResult.success && articlesResult.data) {
  const allArticles = articlesResult.data.documents as unknown as Article[];
  
  // Filter articles by category and published status
  const categoryArticles = allArticles.filter(a => 
    a.categoryId === category.$id && 
    a.status === 'published'
  );

  // Enrich articles with category and author data
  enrichedArticles = await Promise.all(
    categoryArticles.map(async (article) => {
      const [categoryResult, authorResult] = await Promise.all([
        categoryService.getCategory(article.categoryId),
        authorService.getAuthor(article.authorId)
      ]);
      
      return {
        ...article,
        category: categoryResult.success && categoryResult.data 
          ? categoryResult.data 
          : { name: 'Uncategorized', slug: 'uncategorized' },
        author: authorResult.success && authorResult.data
          ? authorResult.data
          : { name: 'Unknown', avatar: '' },
      };
    })
  );
}

// Fetch all categories for "Browse Other Categories" section
const allCategoriesResult = await categoryService.getCategories();
let categoriesWithCounts: any[] = [];

if (allCategoriesResult.success && allCategoriesResult.data) {
  const cats = (allCategoriesResult.data.documents as unknown as Category[])
    .filter(c => c.slug !== category.slug);
  
  // Calculate article count for each category
  if (articlesResult.success && articlesResult.data) {
    const allArticles = articlesResult.data.documents as unknown as Article[];
    
    categoriesWithCounts = cats.map(cat => {
      const count = allArticles.filter(a => 
        a.categoryId === cat.$id && 
        a.status === 'published'
      ).length;
      
      return {
        ...cat,
        articleCount: count
      };
    });
  } else {
    categoriesWithCounts = cats;
  }
}
---

<MainLayout
  title={`${category.name} - Technologiya`}
  description={category.description || `Duk labaran ${category.name} a Technologiya`}
>
  <div class="container mx-auto px-4 py-8">
    
    <!-- Category Header -->
    <header class="mb-12 text-center">
      <div class="inline-block px-4 py-2 bg-blue-600 text-white rounded-full text-sm font-semibold mb-4">
        Rukuni
      </div>
      <h1 class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-gray-100 mb-4">
        {category.name}
      </h1>
      {category.description && (
        <p class="text-lg text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
          {category.description}
        </p>
      )}
      <div class="mt-6 text-sm text-gray-500 dark:text-gray-500">
        {enrichedArticles.length} {enrichedArticles.length === 1 ? 'labari' : 'labarai'}
      </div>
    </header>

    <!-- Articles Grid -->
    {enrichedArticles.length > 0 ? (
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {enrichedArticles.map((article) => (
          <ArticleCard article={article} client:visible />
        ))}
      </div>
    ) : (
      <div class="text-center py-16">
        <p class="text-xl text-gray-600 dark:text-gray-400">
          Babu labarai a wannan rukuni a halin yanzu.
        </p>
      </div>
    )}

    <!-- Browse Other Categories -->
    <section class="mt-16 pt-12 border-t border-gray-200 dark:border-gray-800">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-6 text-center">
        Duba Sauran Rukunin
      </h2>
      <div class="grid grid-cols-2 md:grid-cols-5 gap-4">
        {categoriesWithCounts.map((cat) => (
          <a 
            href={`/category/${cat.slug}`}
            class="group p-6 bg-white dark:bg-gray-800 rounded-lg text-center hover:shadow-lg transition-all duration-300 hover:scale-105 border border-gray-200 dark:border-gray-700"
          >
            <h3 class="font-bold text-gray-900 dark:text-gray-100 group-hover:text-blue-600 dark:group-hover:text-blue-400 mb-2">
              {cat.name}
            </h3>
            <p class="text-xs text-gray-500 dark:text-gray-500">
              {cat.articleCount || 0} {cat.articleCount === 1 ? 'labari' : 'labarai'}
            </p>
          </a>
        ))}
      </div>
    </section>

  </div>
</MainLayout>
